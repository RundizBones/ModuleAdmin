<?php
/**
 * @license http://opensource.org/licenses/MIT MIT
 */


namespace Modules\RdbAdmin\CronJobs;


/**
 * Base cron job.
 * 
 * @since 0.1
 */
abstract class BaseCronJobs implements \Modules\RdbAdmin\Interfaces\CronJobs
{


    /**
     * @var \System\Container
     */
    protected $Container;


    /**
     * @var \Modules\RdbAdmin\Libraries\Cron
     */
    protected $Cron;


    /**
     * @var \System\Libraries\Db
     */
    protected $Db;


    /**
     * {@inheritDoc}
     */
    public function __construct(\System\Container $Container, \Modules\RdbAdmin\Libraries\Cron $Cron)
    {
        $this->Container = $Container;
        $this->Cron = $Cron;

        if ($this->Container->has('Db')) {
            $this->Db = $this->Container->get('Db');
        }
    }// __construct


    /**
     * Get seconds before next run date/time minus 1 minute.
     * 
     * @param string $unit Accepted unit is 'day', 'hour'
     * @return int Return number of seconds minus 1 minute before next run date/time.
     */
    protected function getSecondsBeforeNext(string $unit = 'day'): int
    {
        $DateTime = new \DateTime();
        $currentTimestamp = $DateTime->format('U');
        $return = 0;

        if ($unit === 'hour') {
            $DateTime->add(new \DateInterval('PT1H'));
            $DateTime->setTime($DateTime->format('H'), 0, 0);
            $DateTime->sub(new \DateInterval('PT1M'));// subtract 1 minute before next run.
            $nextRunTimestamp = $DateTime->format('U');
            $return = (int) ($nextRunTimestamp - $currentTimestamp);
            unset($nextRunTimestamp);
        } elseif ($unit === 'day') {
            $DateTime->add(new \DateInterval('P1D'));
            $DateTime->setTime($DateTime->format('H'), 0, 0);
            $DateTime->sub(new \DateInterval('PT1M'));// subtract 1 minute before next run.
            $nextRunTimestamp = $DateTime->format('U');
            $return = (int) ($nextRunTimestamp - $currentTimestamp);
            unset($nextRunTimestamp);
        }

        unset($currentTimestamp, $DateTime);
        return $return;
    }// getSecondsBeforeNext


}

