<?php
/**
 * @license http://opensource.org/licenses/MIT MIT
 */


namespace Modules\RdbAdmin\CronJobs;


/**
 * Delete expired users that was added or register and wait for confirmation by the link in email.
 * 
 * @since 0.1
 */
class DeleteExpiredUserRegisterWaitConfirm extends BaseCronJobs
{


    /**
     * {@inheritDoc}
     */
    public function execute(): bool
    {
        // crontab format is 'minute' 'hour' 'day of month' 'month' 'day of week'
        // 0-15 for minute unit is start at 0 minute but can delay for 15 minutes.
        $CronExpression = new \Cron\CronExpression('0-15 0 * * *', new \Cron\FieldFactory());

        if ($CronExpression->isDue() && !$this->Cron->hasRun()) {
            $keepWaitActivateDays = 2;// keep for xx days.
            $sql = 'SELECT * FROM `' . $this->Db->tableName('user_fields') . '` AS `user_fields`
                LEFT JOIN `' . $this->Db->tableName('users') . '` AS `users` ON `users`.`user_id` = `user_fields`.`user_id`
                WHERE `users`.`user_status` = 0 
                    AND `users`.`user_deleted` = 0 
                    AND `user_fields`.`field_name` = \'rdbadmin_uf_adduser_waitactivation_since\'
                    AND `user_fields`.`field_value` < :rdbadmin_uf_adduser_waitactivation_since';
            $Sth = $this->Db->PDO()->prepare($sql);
            unset($sql);

            $DateTimeUtc = new \DateTime('now', new \DateTimeZone('UTC'));
            $DateTimeUtc->sub(new \DateInterval('P' . $keepWaitActivateDays . 'D'));

            $Sth->bindValue(':rdbadmin_uf_adduser_waitactivation_since', $DateTimeUtc->format('Y-m-d H:i:s'));
            $Sth->execute();

            $result = $Sth->fetchAll();
            if (is_array($result)) {
                $UsersDb = new \Modules\RdbAdmin\Models\UsersDb($this->Container);
                foreach ($result as $row) {
                    $UsersDb->delete((int) $row->user_id);
                }// endforeach;
                unset($row, $UsersDb);
            }
            unset($result);

            $Sth->closeCursor();
            unset($DateTimeUtc, $keepWaitActivateDays, $Sth);

            // write cache that this job had already run.
            $cacheTTL = $this->getSecondsBeforeNext();
            $this->Cron->cacheHadRun($cacheTTL);
            unset($cacheTTL);

            unset($CronExpression);
            return true;
        }// endif isDue()

        unset($CronExpression);
        return false;
    }// execute


}

