<?php
/**
 * @license http://opensource.org/licenses/MIT MIT
 */


namespace Modules\RdbAdmin\Models;


/**
 * Config DB model.
 * 
 * @since 0.1
 */
class ConfigDb extends \System\Core\Models\BaseModel
{


    use Traits\CacheFileTrait;


    /**
     * {@inheritDoc}
     */
    public function __construct(\System\Container $Container)
    {
        $this->storageFile = 'config-db.php';
        if ($Container->has('Modules')) {
            /* @var $Modules \System\Modules */
            $Modules = $Container->get('Modules');
            $Modules->setCurrentModule(get_called_class());
            unset($Modules);
        }
        $this->beginCacheFileTrait($Container);

        parent::__construct($Container);
    }// __construct


    /**
     * Get DB result and build cache content.
     * 
     * @return string Return generated data in php language that is ready to use as cache.
     */
    public function buildCacheContent()
    {
        $sql = 'SELECT * FROM `' . $this->Db->tableName('config') . '`';
        $Pdo = $this->Db->PDO();
        $Sth = $Pdo->prepare($sql);
        $Sth->execute();
        $result = $Sth->fetchAll();
        $Sth->closeCursor();
        unset($Pdo, $sql, $Sth);

        $output = '<?php' . PHP_EOL .
            '/**' . PHP_EOL .
            ' * Auto generate.' . PHP_EOL .
            ' */' . PHP_EOL . 
            PHP_EOL .
            'return [' . PHP_EOL;

        if (is_array($result)) {
            foreach ($result as $row) {
                $output .= '    // ' . str_replace(array("\r\n", "\r", "\n"), '', $row->config_description) . PHP_EOL .
                    '    (object) [' . PHP_EOL;
                if (is_object($row)) {
                    foreach ($row as $fieldName => $fieldValue) {
                        $output .= '        \'' . $fieldName . '\' => ' . var_export($fieldValue, true) . ',' . PHP_EOL;
                    }// endforeach;
                    unset($fieldName, $fieldValue);
                }
                $output .= '    ],' . PHP_EOL;
            }// endforeach;
            unset($row);
        }

        unset($result);
        $output .= '];' . PHP_EOL;// end return [...];

        return $output;
    }// buildCacheContent


    /**
     * Get config value(s).
     * 
     * Example for get single config name:
     * <pre>
     * $ConfigDb->get('config_name', 'default_value');
     * </pre>
     * 
     * Example for get multiple config name:
     * <pre>
     * $names = ['config_name1', 'config_name2'];
     * $defaults = ['default_value1', 'default_value2'];
     * $ConfigDb->get($names, $defaults);
     * </pre>
     * 
     * @param array|string $name The config name can be string (name) or array (names).
     * @param array|string $default The default config value if this configuration is not exists or have no value. This can be any types but if name is array then this will always be array.
     * @return array|string Return config value. If name is array then it will always return the array with name in key or empty array in case that it is not found.
     * @throws \InvalidArgumentException Throw the error if `$name` is not string and `$name, `$default` is different type. If one is array the other one must be array.
     */
    public function get($name, $default = '')
    {
        if (!is_scalar($name) && gettype($name) !== gettype($default)) {
            throw new \InvalidArgumentException('The argument $default must be the same type with $name.');
        }

        if (is_array($name)) {
            return $this->getMultiple($name, $default);
        }

        $item = $this->getRow($name, $default);

        if (is_object($item) && isset($item->config_value)) {
            return $item->config_value;
        }
        unset($item);

        return $default;
    }// get


    /**
     * Get config values.
     * 
     * This method was called from `get()` method.
     * 
     * @param array $names The config names.
     * @param array $defaults The default values that must be matched the array key of `$names`.
     * @return array Always return array with the name in key.
     * @throws \InvalidArgumentException Throw error if total array values of `$names` and `$defaults` is not matched and `$defaults` is not an empty array.
     */
    protected function getMultiple(array $names, array $defaults = []): array
    {
        if (count($names) !== count($defaults) && !empty($defaults)) {
            throw new \InvalidArgumentException(
                sprintf(
                    'Total array values of `$names` and `$defaults` argument must be matched. ($names: %1$d != $defaults: %2$d)', 
                    count($names), 
                    count($defaults)
                )
            );
        }

        $output = [];

        foreach ($names as $key => $name) {
            $item = $this->getRow($name, ($defaults[$key] ?? ''));

            if (is_object($item) && isset($item->config_value)) {
                $output[$name] = $item->config_value;
            } else {
                $output[$name] = $item;
            }

            unset($item);
        }// endforeach;
        unset($key, $name);

        return $output;
    }// getMultiple


    /**
     * Get config data as object (DB row) by name condition.
     * 
     * This method was called from `get()`, `getMultiple()` methods.
     * 
     * @param string $name The name of config to search.
     * @param mixed $default The default config value if this configuration is not exists.
     * @return mixed Return object if found, return `$default` if not found.
     */
    protected function getRow(string $name, $default = '')
    {
        $this->loadCacheData([$this, 'buildCacheContent']);

        if (is_array($this->storageData)) {
            foreach ($this->storageData as $item) {
                if (is_object($item) && isset($item->config_name) && isset($item->config_value)) {
                    if ($item->config_name === $name) {
                        return $item;
                    }
                }
            }// endforeach;
            unset($item);
        }

        return $default;
    }// getRow


    /**
     * Update configuration DB.
     * 
     * @param array $data The associative array where its key is column name and value is its value to update.
     * @param array $where The associative array where its key is column name and value is its value.
     * @return bool Return `true` on success update, `false` for otherwise.
     */
    public function update(array $data, array $where): bool
    {
        $result = $this->Db->update($this->Db->tableName('config'), $data, $where);

        if ($result === true) {
            // if success update.
            // clear cache.
            $this->deleteCachedFile();
        }

        return $result;
    }// update


    /**
     * Update multiple values.
     * 
     * @param array $data Associative array where key is match config_name column and value is match config_value column.
     * @return bool Return `true` if **all** data has been updated, `false` for otherwise.
     */
    public function updateMultipleValues(array $data): bool
    {
        $i = 0;
        foreach ($data as $config_name => $config_value) {
            $result = $this->Db->update($this->Db->tableName('config'), ['config_value' => $config_value], ['config_name' => $config_name]);
            if ($result === true) {
                $i++;
            }
            unset($result);
        }

        // clear cache.
        $this->deleteCachedFile();

        if ($i == count($data)) {
            return true;
        } else {
            return false;
        }
    }// updateMultipleValues


    /**
     * Update configuration value only.
     * 
     * @param mixed $value The config value to update.
     * @param string $name The config name to search for.
     * @return bool Return `true` on success update, `false` for otherwise.
     */
    public function updateValue($value, string $name): bool
    {
        if (!is_scalar($value) && !is_null($value)) {
            $Serializer = new \Rundiz\Serializer\Serializer();
            $value = $Serializer->maybeSerialize($value);
            unset($Serializer);
        }

        $data = [];
        $data['config_value'] = $value;
        $where = [];
        $where['config_name'] = $name;

        return $this->update($data, $where);
    }// updateValue


}

